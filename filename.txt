Distributed
computing

Wikipedia
Distributed
computing
From
Wikipedia
the
free
encyclopedia
Jump
to
navigation
Jump
to
search
Distributed
application
redirects
here
For
trustless
applications
see
Decentralized
application
Distributed
Information
Processing
redirects
here
For
the
computer
company
see
DIP
Research
Distributed
computing
is
a
field
of
computer
science
that
studies
distributed
systems
A
distributed
system
is
a
system
whose
components
are
located
on
different
networked
computers
which
then
communicate
and
coordinate
their
actions
by
passing
messages
to
one
another
The
components
interact
with
one
another
in
order
to
achieve
a
common
goal
Three
significant
characteristics
of
distributed
systems
are
concurrency
of
components
lack
of
a
global
clock
and
independent
failure
of
components
Examples
of
distributed
systems
vary
from
SOAbased
systems
to
massively
multiplayer
online
games
to
peertopeer
applications
A
computer
program
that
runs
within
a
distributed
system
is
called
a
distributed
program
and
distributed
programming
is
the
process
of
writing
such
programs
There
are
many
different
types
of
implementations
for
the
message
passing
mechanism
including
pure
HTTP
RPClike
connectors
and
message
queues
Distributed
computing
also
refers
to
the
use
of
distributed
systems
to
solve
computational
problems
In
distributed
computing
a
problem
is
divided
into
many
tasks
each
of
which
is
solved
by
one
or
more
computers
which
communicate
with
each
other
via
message
passing
Contents
1
Introduction
2
Parallel
and
distributed
computing
3
History
4
Architectures
5
Applications
6
Examples
7
Theoretical
foundations
71
Models
72
An
example
73
Complexity
measures
74
Other
problems
75
Properties
of
distributed
systems
8
See
also
9
Notes
10
References
11
Further
reading
12
External
links
Introduction
The
word
parallel
in
terms
such
as
parallel
system
distributed
programming
and
distributed
algorithm
originally
referred
to
computer
networks
where
individual
computers
were
physically
distributed
within
some
geographical
area
The
terms
are
nowadays
used
in
a
much
wider
sense
even
referring
to
autonomous
processes
that
run
on
the
same
physical
computer
and
interact
with
each
other
by
message
passing
While
there
is
no
single
definition
of
a
distributed
system
the
following
defining
properties
are
commonly
used
There
are
several
autonomous
computational
entities
computers
or
nodes
each
of
which
has
its
own
local
memory
The
entities
communicate
with
each
other
by
message
passing
A
distributed
system
may
have
a
common
goal
such
as
solving
a
large
computational
problem
the
user
then
perceives
the
collection
of
autonomous
processors
as
a
unit
Alternatively
each
computer
may
have
its
own
user
with
individual
needs
and
the
purpose
of
the
distributed
system
is
to
coordinate
the
use
of
shared
resources
or
provide
communication
services
to
the
users
Other
typical
properties
of
distributed
systems
include
the
following
The
system
has
to
tolerate
failures
in
individual
computers
The
structure
of
the
system
network
topology
network
latency
number
of
computers
is
not
known
in
advance
the
system
may
consist
of
different
kinds
of
computers
and
network
links
and
the
system
may
change
during
the
execution
of
a
distributed
program
Each
computer
has
only
a
limited
incomplete
view
of
the
system
Each
computer
may
know
only
one
part
of
the
input
Parallel
and
distributed
computing
a
b
a
distributed
system
c
a
parallel
system
Distributed
systems
are
groups
of
networked
computers
which
have
the
same
goal
for
their
workThe
terms
concurrent
computing
parallel
computing
and
distributed
computing
have
a
lot
of
overlap
and
no
clear
distinction
exists
between
them
The
same
system
may
be
characterized
both
as
parallel
and
distributed
the
processors
in
a
typical
distributed
system
run
concurrently
in
parallel
Parallel
computing
may
be
seen
as
a
particular
tightly
coupled
form
of
distributed
computing
and
distributed
computing
may
be
seen
as
a
loosely
coupled
form
of
parallel
computing
Nevertheless
it
is
possible
to
roughly
classify
concurrent
systems
as
parallel
or
distributed
using
the
following
criteria
In
parallel
computing
all
processors
may
have
access
to
a
shared
memory
to
exchange
information
between
processors
In
distributed
computing
each
processor
has
its
own
private
memory
distributed
memory
Information
is
exchanged
by
passing
messages
between
the
processors
The
figure
on
the
right
illustrates
the
difference
between
distributed
and
parallel
systems
Figure
a
is
a
schematic
view
of
a
typical
distributed
system
the
system
is
represented
as
a
network
topology
in
which
each
node
is
a
computer
and
each
line
connecting
the
nodes
is
a
communication
link
Figure
b
shows
the
same
distributed
system
in
more
detail
each
computer
has
its
own
local
memory
and
information
can
be
exchanged
only
by
passing
messages
from
one
node
to
another
by
using
the
available
communication
links
Figure
c
shows
a
parallel
system
in
which
each
processor
has
a
direct
access
to
a
shared
memory
The
situation
is
further
complicated
by
the
traditional
uses
of
the
terms
parallel
and
distributed
algorithm
that
do
not
quite
match
the
above
definitions
of
parallel
and
distributed
systems
see
below
for
more
detailed
discussion
Nevertheless
as
a
rule
of
thumb
highperformance
parallel
computation
in
a
sharedmemory
multiprocessor
uses
parallel
algorithms
while
the
coordination
of
a
largescale
distributed
system
uses
distributed
algorithms
History
The
use
of
concurrent
processes
that
communicate
by
messagepassing
has
its
roots
in
operating
system
architectures
studied
in
the
1960s
The
first
widespread
distributed
systems
were
localarea
networks
such
as
Ethernet
which
was
invented
in
the
1970s
ARPANET
the
predecessor
of
the
Internet
was
introduced
in
the
late
1960s
and
ARPANET
email
was
invented
in
the
early
1970s
Email
became
the
most
successful
application
of
ARPANET
and
it
is
probably
the
earliest
example
of
a
largescale
distributed
application
In
addition
to
ARPANET
and
its
successor
the
Internet
other
early
worldwide
computer
networks
included
Usenet
and
FidoNet
from
the
1980s
both
of
which
were
used
to
support
distributed
discussion
systems
The
study
of
distributed
computing
became
its
own
branch
of
computer
science
in
the
late
1970s
and
early
1980s
The
first
conference
in
the
field
Symposium
on
Principles
of
Distributed
Computing
PODC
dates
back
to
1982
and
its
counterpart
International
Symposium
on
Distributed
Computing
DISC
was
first
held
in
Ottawa
in
1985
as
the
International
Workshop
on
Distributed
Algorithms
on
Graphs
Architectures
Various
hardware
and
software
architectures
are
used
for
distributed
computing
At
a
lower
level
it
is
necessary
to
interconnect
multiple
CPUs
with
some
sort
of
network
regardless
of
whether
that
network
is
printed
onto
a
circuit
board
or
made
up
of
loosely
coupled
devices
and
cables
At
a
higher
level
it
is
necessary
to
interconnect
processes
running
on
those
CPUs
with
some
sort
of
communication
system
Distributed
programming
typically
falls
into
one
of
several
basic
architectures
client–server
threetier
ntier
or
peertopeer
or
categories
loose
coupling
or
tight
coupling
Client–server
architectures
where
smart
clients
contact
the
server
for
data
then
format
and
display
it
to
the
users
Input
at
the
client
is
committed
back
to
the
server
when
it
represents
a
permanent
change
Threetier
architectures
that
move
the
client
intelligence
to
a
middle
tier
so
that
stateless
clients
can
be
used
This
simplifies
application
deployment
Most
web
applications
are
threetier
ntier
architectures
that
refer
typically
to
web
applications
which
further
forward
their
requests
to
other
enterprise
services
This
type
of
application
is
the
one
most
responsible
for
the
success
of
application
servers
Peertopeer
architectures
where
there
are
no
special
machines
that
provide
a
service
or
manage
the
network
resources227
Instead
all
responsibilities
are
uniformly
divided
among
all
machines
known
as
peers
Peers
can
serve
both
as
clients
and
as
servers
Another
basic
aspect
of
distributed
computing
architecture
is
the
method
of
communicating
and
coordinating
work
among
concurrent
processes
Through
various
message
passing
protocols
processes
may
communicate
directly
with
one
another
typically
in
a
master/slave
relationship
Alternatively
a
databasecentric
architecture
can
enable
distributed
computing
to
be
done
without
any
form
of
direct
interprocess
communication
by
utilizing
a
shared
database
Applications
Reasons
for
using
distributed
systems
and
distributed
computing
may
include
The
very
nature
of
an
application
may
require
the
use
of
a
communication
network
that
connects
several
computers
for
example
data
produced
in
one
physical
location
and
required
in
another
location
There
are
many
cases
in
which
the
use
of
a
single
computer
would
be
possible
in
principle
but
the
use
of
a
distributed
system
is
beneficial
for
practical
reasons
For
example
it
may
be
more
costefficient
to
obtain
the
desired
level
of
performance
by
using
a
cluster
of
several
lowend
computers
in
comparison
with
a
single
highend
computer
A
distributed
system
can
provide
more
reliability
than
a
nondistributed
system
as
there
is
no
single
point
of
failure
Moreover
a
distributed
system
may
be
easier
to
expand
and
manage
than
a
monolithic
uniprocessor
system
Examples
Examples
of
distributed
systems
and
applications
of
distributed
computing
include
the
following
telecommunication
networks
telephone
networks
and
cellular
networks
computer
networks
such
as
the
Internet
wireless
sensor
networks
routing
algorithms
network
applications
World
Wide
Web
and
peertopeer
networks
massively
multiplayer
online
games
and
virtual
reality
communities
distributed
databases
and
distributed
database
management
systems
network
file
systems
distributed
information
processing
systems
such
as
banking
systems
and
airline
reservation
systems
realtime
process
control
aircraft
control
systems
industrial
control
systems
parallel
computation
scientific
computing
including
cluster
computing
and
grid
computing
and
various
volunteer
computing
projects
see
the
list
of
distributed
computing
projects
distributed
rendering
in
computer
graphics
Theoretical
foundations
Main
article
Distributed
algorithm
Models
Many
tasks
that
we
would
like
to
automate
by
using
a
computer
are
of
question–answer
type
we
would
like
to
ask
a
question
and
the
computer
should
produce
an
answer
In
theoretical
computer
science
such
tasks
are
called
computational
problems
Formally
a
computational
problem
consists
of
instances
together
with
a
solution
for
each
instance
Instances
are
questions
that
we
can
ask
and
solutions
are
desired
answers
to
these
questions
Theoretical
computer
science
seeks
to
understand
which
computational
problems
can
be
solved
by
using
a
computer
computability
theory
and
how
efficiently
computational
complexity
theory
Traditionally
it
is
said
that
a
problem
can
be
solved
by
using
a
computer
if
we
can
design
an
algorithm
that
produces
a
correct
solution
for
any
given
instance
Such
an
algorithm
can
be
implemented
as
a
computer
program
that
runs
on
a
generalpurpose
computer
the
program
reads
a
problem
instance
from
input
performs
some
computation
and
produces
the
solution
as
output
Formalisms
such
as
random
access
machines
or
universal
Turing
machines
can
be
used
as
abstract
models
of
a
sequential
generalpurpose
computer
executing
such
an
algorithm
The
field
of
concurrent
and
distributed
computing
studies
similar
questions
in
the
case
of
either
multiple
computers
or
a
computer
that
executes
a
network
of
interacting
processes
which
computational
problems
can
be
solved
in
such
a
network
and
how
efficiently?
However
it
is
not
at
all
obvious
what
is
meant
by
solving
a
problem
in
the
case
of
a
concurrent
or
distributed
system
for
example
what
is
the
task
of
the
algorithm
designer
and
what
is
the
concurrent
or
distributed
equivalent
of
a
sequential
generalpurpose
computer?
The
discussion
below
focuses
on
the
case
of
multiple
computers
although
many
of
the
issues
are
the
same
for
concurrent
processes
running
on
a
single
computer
Three
viewpoints
are
commonly
used
Parallel
algorithms
in
sharedmemory
model
All
processors
have
access
to
a
shared
memory
The
algorithm
designer
chooses
the
program
executed
by
each
processor
One
theoretical
model
is
the
parallel
random
access
machines
PRAM
that
are
used
However
the
classical
PRAM
model
assumes
synchronous
access
to
the
shared
memory
Sharedmemory
programs
can
be
extended
to
distributed
systems
if
the
underlying
operating
system
encapsulates
the
communication
between
nodes
and
virtually
unifies
the
memory
across
all
individual
systems
A
model
that
is
closer
to
the
behavior
of
realworld
multiprocessor
machines
and
takes
into
account
the
use
of
machine
instructions
such
as
Compareandswap
CAS
is
that
of
asynchronous
shared
memory
There
is
a
wide
body
of
work
on
this
model
a
summary
of
which
can
be
found
in
the
literature
Parallel
algorithms
in
messagepassing
model
The
algorithm
designer
chooses
the
structure
of
the
network
as
well
as
the
program
executed
by
each
computer
Models
such
as
Boolean
circuits
and
sorting
networks
are
used
A
Boolean
circuit
can
be
seen
as
a
computer
network
each
gate
is
a
computer
that
runs
an
extremely
simple
computer
program
Similarly
a
sorting
network
can
be
seen
as
a
computer
network
each
comparator
is
a
computer
Distributed
algorithms
in
messagepassing
model
The
algorithm
designer
only
chooses
the
computer
program
All
computers
run
the
same
program
The
system
must
work
correctly
regardless
of
the
structure
of
the
network
A
commonly
used
model
is
a
graph
with
one
finitestate
machine
per
node
In
the
case
of
distributed
algorithms
computational
problems
are
typically
related
to
graphs
Often
the
graph
that
describes
the
structure
of
the
computer
network
is
the
problem
instance
This
is
illustrated
in
the
following
example
An
example
Consider
the
computational
problem
of
finding
a
coloring
of
a
given
graph
G
Different
fields
might
take
the
following
approaches
Centralized
algorithms
The
graph
G
is
encoded
as
a
string
and
the
string
is
given
as
input
to
a
computer
The
computer
program
finds
a
coloring
of
the
graph
encodes
the
coloring
as
a
string
and
outputs
the
result
Parallel
algorithms
Again
the
graph
G
is
encoded
as
a
string
However
multiple
computers
can
access
the
same
string
in
parallel
Each
computer
might
focus
on
one
part
of
the
graph
and
produce
a
coloring
for
that
part
The
main
focus
is
on
highperformance
computation
that
exploits
the
processing
power
of
multiple
computers
in
parallel
Distributed
algorithms
The
graph
G
is
the
structure
of
the
computer
network
There
is
one
computer
for
each
node
of
G
and
one
communication
link
for
each
edge
of
G
Initially
each
computer
only
knows
about
its
immediate
neighbors
in
the
graph
G
the
computers
must
exchange
messages
with
each
other
to
discover
more
about
the
structure
of
G
Each
computer
must
produce
its
own
color
as
output
The
main
focus
is
on
coordinating
the
operation
of
an
arbitrary
distributed
system
While
the
field
of
parallel
algorithms
has
a
different
focus
than
the
field
of
distributed
algorithms
there
is
a
lot
of
interaction
between
the
two
fields
For
example
the
Cole–Vishkin
algorithm
for
graph
coloring
was
originally
presented
as
a
parallel
algorithm
but
the
same
technique
can
also
be
used
directly
as
a
distributed
algorithm
Moreover
a
parallel
algorithm
can
be
implemented
either
in
a
parallel
system
using
shared
memory
or
in
a
distributed
system
using
message
passing
The
traditional
boundary
between
parallel
and
distributed
algorithms
choose
a
suitable
network
vs
run
in
any
given
network
does
not
lie
in
the
same
place
as
the
boundary
between
parallel
and
distributed
systems
shared
memory
vs
message
passing
Complexity
measures
In
parallel
algorithms
yet
another
resource
in
addition
to
time
and
space
is
the
number
of
computers
Indeed
often
there
is
a
tradeoff
between
the
running
time
and
the
number
of
computers
the
problem
can
be
solved
faster
if
there
are
more
computers
running
in
parallel
see
speedup
If
a
decision
problem
can
be
solved
in
polylogarithmic
time
by
using
a
polynomial
number
of
processors
then
the
problem
is
said
to
be
in
the
class
NC
The
class
NC
can
be
defined
equally
well
by
using
the
PRAM
formalism
or
Boolean
circuits—PRAM
machines
can
simulate
Boolean
circuits
efficiently
and
vice
versa
In
the
analysis
of
distributed
algorithms
more
attention
is
usually
paid
on
communication
operations
than
computational
steps
Perhaps
the
simplest
model
of
distributed
computing
is
a
synchronous
system
where
all
nodes
operate
in
a
lockstep
fashion
This
model
is
commonly
known
as
the
LOCAL
model
During
each
communication
round
all
nodes
in
parallel
1
receive
the
latest
messages
from
their
neighbours
2
perform
arbitrary
local
computation
and
3
send
new
messages
to
their
neighbors
In
such
systems
a
central
complexity
measure
is
the
number
of
synchronous
communication
rounds
required
to
complete
the
task
This
complexity
measure
is
closely
related
to
the
diameter
of
the
network
Let
D
be
the
diameter
of
the
network
On
the
one
hand
any
computable
problem
can
be
solved
trivially
in
a
synchronous
distributed
system
in
approximately
2D
communication
rounds
simply
gather
all
information
in
one
location
D
rounds
solve
the
problem
and
inform
each
node
about
the
solution
D
rounds
On
the
other
hand
if
the
running
time
of
the
algorithm
is
much
smaller
than
D
communication
rounds
then
the
nodes
in
the
network
must
produce
their
output
without
having
the
possibility
to
obtain
information
about
distant
parts
of
the
network
In
other
words
the
nodes
must
make
globally
consistent
decisions
based
on
information
that
is
available
in
their
local
Dneighbourhood
Many
distributed
algorithms
are
known
with
the
running
time
much
smaller
than
D
rounds
and
understanding
which
problems
can
be
solved
by
such
algorithms
is
one
of
the
central
research
questions
of
the
field
Typically
an
algorithm
which
solves
a
problem
in
polylogarithmic
time
in
the
network
size
is
considered
efficient
in
this
model
Another
commonly
used
measure
is
the
total
number
of
bits
transmitted
in
the
network
cf
communication
complexity
The
features
of
this
concept
are
typically
captured
with
the
CONGESTB
model
which
similarly
defined
as
the
LOCAL
model
but
where
single
messages
can
only
contain
B
bits
Other
problems
Traditional
computational
problems
take
the
perspective
that
we
ask
a
question
a
computer
or
a
distributed
system
processes
the
question
for
a
while
and
then
produces
an
answer
and
stops
However
there
are
also
problems
where
we
do
not
want
the
system
to
ever
stop
Examples
of
such
problems
include
the
dining
philosophers
problem
and
other
similar
mutual
exclusion
problems
In
these
problems
the
distributed
system
is
supposed
to
continuously
coordinate
the
use
of
shared
resources
so
that
no
conflicts
or
deadlocks
occur
There
are
also
fundamental
challenges
that
are
unique
to
distributed
computing
The
first
example
is
challenges
that
are
related
to
faulttolerance
Examples
of
related
problems
include
consensus
problems
Byzantine
fault
tolerance
and
selfstabilisation
A
lot
of
research
is
also
focused
on
understanding
the
asynchronous
nature
of
distributed
systems
Synchronizers
can
be
used
to
run
synchronous
algorithms
in
asynchronous
systems
Logical
clocks
provide
a
causal
happenedbefore
ordering
of
events
Clock
synchronization
algorithms
provide
globally
consistent
physical
time
stamps
Election
Coordinator
election
or
leader
election
is
the
process
of
designating
a
single
process
as
the
organizer
of
some
task
distributed
among
several
computers
nodes
Before
the
task
is
begun
all
network
nodes
are
either
unaware
which
node
will
serve
as
the
coordinator
or
leader
of
the
task
or
unable
to
communicate
with
the
current
coordinator
After
a
coordinator
election
algorithm
has
been
run
however
each
node
throughout
the
network
recognizes
a
particular
unique
node
as
the
task
coordinator
The
network
nodes
communicate
among
themselves
in
order
to
decide
which
of
them
will
get
into
the
coordinator
state
For
that
they
need
some
method
in
order
to
break
the
symmetry
among
them
For
example
if
each
node
has
unique
and
comparable
identities
then
the
nodes
can
compare
their
identities
and
decide
that
the
node
with
the
highest
identity
is
the
coordinator
The
definition
of
this
problem
is
often
attributed
to
LeLann
who
formalized
it
as
a
method
to
create
a
new
token
in
a
token
ring
network
in
which
the
token
has
been
lost
Coordinator
election
algorithms
are
designed
to
be
economical
in
terms
of
total
bytes
transmitted
and
time
The
algorithm
suggested
by
Gallager
Humblet
and
Spira

for
general
undirected
graphs
has
had
a
strong
impact
on
the
design
of
distributed
algorithms
in
general
and
won
the
Dijkstra
Prize
for
an
influential
paper
in
distributed
computing
Many
other
algorithms
were
suggested
for
different
kind
of
network
graphs
such
as
undirected
rings
unidirectional
rings
complete
graphs
grids
directed
Euler
graphs
and
others
A
general
method
that
decouples
the
issue
of
the
graph
family
from
the
design
of
the
coordinator
election
algorithm
was
suggested
by
Korach
Kutten
and
Moran
In
order
to
perform
coordination
distributed
systems
employ
the
concept
of
coordinators
The
coordinator
election
problem
is
to
choose
a
process
from
among
a
group
of
processes
on
different
processors
in
a
distributed
system
to
act
as
the
central
coordinator
Several
central
coordinator
election
algorithms
exist
Properties
of
distributed
systems
So
far
the
focus
has
been
on
designing
a
distributed
system
that
solves
a
given
problem
A
complementary
research
problem
is
studying
the
properties
of
a
given
distributed
system
The
halting
problem
is
an
analogous
example
from
the
field
of
centralised
computation
we
are
given
a
computer
program
and
the
task
is
to
decide
whether
it
halts
or
runs
forever
The
halting
problem
is
undecidable
in
the
general
case
and
naturally
understanding
the
behaviour
of
a
computer
network
is
at
least
as
hard
as
understanding
the
behaviour
of
one
computer
However
there
are
many
interesting
special
cases
that
are
decidable
In
particular
it
is
possible
to
reason
about
the
behaviour
of
a
network
of
finitestate
machines
One
example
is
telling
whether
a
given
network
of
interacting
asynchronous
and
nondeterministic
finitestate
machines
can
reach
a
deadlock
This
problem
is
PSPACEcomplete
ie
it
is
decidable
but
it
is
not
likely
that
there
is
an
efficient
centralised
parallel
or
distributed
algorithm
that
solves
the
problem
in
the
case
of
large
networks
See
also
AppScale
BOINC
Code
mobility
Decentralized
computing
Distributed
algorithm
Distributed
algorithmic
mechanism
design
Distributed
cache
Distributed
operating
system
Edsger
W
Dijkstra
Prize
in
Distributed
Computing
Fog
computing
Folding@home
Grid
computing
Inferno
Jungle
computing
Layered
queueing
network
Library
Oriented
Architecture
LOA
List
of
distributed
computing
conferences
List
of
distributed
computing
projects
List
of
important
publications
in
concurrent
parallel
and
distributed
computing
Model
checking
Parallel
distributed
processing
Parallel
programming
model
Plan
9
from
Bell
Labs
Shared
nothing
architecture
Notes
^
a
b
Coulouris
George
Jean
Dollimore
Tim
Kindberg
Gordon
Blair
2011
Distributed
Systems
Concepts
and
Design
5th
Edition
Boston
AddisonWesley
ISBN
0132143011
^
Andrews
2000
Dolev
2000
Ghosh
2007
p
10
^
Magnoni
L
2015
Modern
Messaging
for
Distributed
Sytems
Journal
of
Physics
Conference
Series
608
1
012038
doi101088/17426596/608/1/012038
ISSN
17426596
^
Godfrey
2002
^
a
b
Andrews
2000
p
291–292
Dolev
2000
p
5
^
Lynch
1996
p
1
^
a
b
Ghosh
2007
p
10
^
Andrews
2000
pp
8–9
291
Dolev
2000
p
5
Ghosh
2007
p
3
Lynch
1996
p
xix
1
Peleg
2000
p
xv
^
Andrews
2000
p
291
Ghosh
2007
p
3
Peleg
2000
p
4
^
Ghosh
2007
p
3–4
Peleg
2000
p
1
^
Ghosh
2007
p
4
Peleg
2000
p
2
^
Ghosh
2007
p
4
8
Lynch
1996
p
2–3
Peleg
2000
p
4
^
Lynch
1996
p
2
Peleg
2000
p
1
^
Ghosh
2007
p
7
Lynch
1996
p
xix
2
Peleg
2000
p
4
^
Ghosh
2007
p
10
Keidar
2008
^
Lynch
1996
p
xix
1–2
Peleg
2000
p
1
^
Peleg
2000
p
1
^
Papadimitriou
1994
Chapter
15
Keidar
2008
^
See
references
in
Introduction
^
Bentaleb
A
Yifan
L
Xin
J
et
al
2016
Parallel
and
Distributed
Algorithms
PDF
National
University
of
Singapore
Retrieved
20
July
2018CS1
maint
Explicit
use
of
et
al
link
CS1
maint
Multiple
names
authors
list
link
^
Andrews
2000
p
348
^
Andrews
2000
p
32
^
Peter
2004
The
history
of
email
^
Banks
M
2012
On
the
Way
to
the
Web
The
Secret
History
of
the
Internet
and
its
Founders
Apress
pp
44–5
ISBN
9781430250746
^
Tel
G
2000
Introduction
to
Distributed
Algorithms
Cambridge
University
Press
pp
35–36
ISBN
9780521794831
^
Ohlídal
M
Jaroš
J
Schwarz
J
et
al
2006
Evolutionary
Design
of
OAB
and
AAB
Communication
Schedules
for
Interconnection
Networks
In
Rothlauf
F
Branke
J
Cagnoni
S
et
al
Applications
of
Evolutionary
Computing
Springer
Science
&
Business
Media
pp
267–78
ISBN
9783540332374CS1
maint
Explicit
use
of
et
al
link
CS1
maint
Multiple
names
authors
list
link
^
Real
Time
And
Distributed
Computing
Systems
PDF
ISSN
22780661
Retrieved
20170109
^
Vigna
P
Casey
MJ
The
Age
of
Cryptocurrency
How
Bitcoin
and
the
Blockchain
Are
Challenging
the
Global
Economic
Order
St
Martin's
Press
January
27
2015
ISBN
9781250065636
^
Hieu
Vu
Quang
2010
Peertopeer
computing

principles
and
applications
Lupu
Mihai
Ooi
Beng
Chin
1961
Heidelberg
Springer
p
16
ISBN
9783642035135
OCLC
663093862
^
Lind
P
Alm
M
2006
A
databasecentric
virtual
chemistry
system
J
Chem
Inf
Model
46
3
1034–9
doi101021/ci050360b
PMID
16711722
^
Elmasri
&
Navathe
2000
Section
2412
^
Andrews
2000
p
10–11
Ghosh
2007
p
4–6
Lynch
1996
p
xix
1
Peleg
2000
p
xv
Elmasri
&
Navathe
2000
Section
24
^
Toomarian
NB
Barhen
J
Gulati
S
1992
Neural
Networks
for
RealTime
Robotic
Applications
In
Fijany
A
Bejczy
A
Parallel
Computation
Systems
For
Robotics
Algorithms
And
Architectures
World
Scientific
p
214
ISBN
9789814506175CS1
maint
Multiple
names
authors
list
link
^
Savage
JE
1998
Models
of
Computation
Exploring
the
Power
of
Computing
Addison
Wesley
p
209
ISBN
9780201895391
^
Cormen
Leiserson
&
Rivest
1990
Section
30
^
Herlihy
&
Shavit
2008
Chapters
26
^
Lynch
1996
^
Cormen
Leiserson
&
Rivest
1990
Sections
28
and
29
^
Cole
&
Vishkin
1986
Cormen
Leiserson
&
Rivest
1990
Section
305
^
Andrews
2000
p
ix
^
Arora
&
Barak
2009
Section
67
Papadimitriou
1994
Section
153
^
Papadimitriou
1994
Section
152
^
Lynch
1996
p
17–23
^
Peleg
2000
Sections
23
and
7
Linial
1992
Naor
&
Stockmeyer
1995
^
Schneider
J
Wattenhofer
R
2011
Trading
Bit
Message
and
Time
Complexity
of
Distributed
Algorithms
In
Peleg
D
Distributed
Computing
Springer
Science
&
Business
Media
pp
51–65
ISBN
9783642240997CS1
maint
Multiple
names
authors
list
link
^
Lynch
1996
Sections
5–7
Ghosh
2007
Chapter
13
^
Lynch
1996
p
99–102
Ghosh
2007
p
192–193
^
Dolev
2000
Ghosh
2007
Chapter
17
^
Lynch
1996
Section
16
Peleg
2000
Section
6
^
Lynch
1996
Section
18
Ghosh
2007
Sections
62–63
^
Ghosh
2007
Section
64
^
a
b
Haloi
S
2015
Apache
ZooKeeper
Essentials
Packt
Publishing
Ltd
pp
100–101
ISBN
9781784398323
^
LeLann
G
1977
Distributed
systems

toward
a
formal
approach
Information
Processing
77
155·160
–
via
Elsevier
^
R
G
Gallager
P
A
Humblet
and
P
M
Spira
January
1983
A
Distributed
Algorithm
for
MinimumWeight
Spanning
Trees
PDF
ACM
Transactions
on
Programming
Languages
and
Systems
5
1
66–77
doi101145/357195357200CS1
maint
Multiple
names
authors
list
link
^
Korach
Ephraim
Kutten
Shay
Moran
Shlomo
1990
A
Modular
Technique
for
the
Design
of
Efficient
Distributed
Leader
Finding
Algorithms
PDF
ACM
Transactions
on
Programming
Languages
and
Systems
12
1
84–101
doi101145/7760677610
^
Hamilton
Howard
Distributed
Algorithms
Retrieved
20130303
^
Major
unsolved
problems
in
distributed
systems?
cstheorystackexchangecom
Retrieved
16
March
2018
^
How
big
data
and
distributed
systems
solve
traditional
scalability
problems
theserversidecom
Retrieved
16
March
2018
^
Svozil
K
2011
Indeterminism
and
Randomness
Through
Physics
In
Hector
Z
Randomness
Through
Computation
Some
Answers
More
Questions
World
Scientific
pp
112–3
ISBN
9789814462631
^
Papadimitriou
1994
Section
193
References
Books
Andrews
Gregory
R
2000
Foundations
of
Multithreaded
Parallel
and
Distributed
Programming
Addison–Wesley
ISBN
0201357526

Arora
Sanjeev
Barak
Boaz
2009
Computational
Complexity
–
A
Modern
Approach
Cambridge
ISBN
9780521424264

Cormen
Thomas
H
Leiserson
Charles
E
Rivest
Ronald
L
1990
Introduction
to
Algorithms
1st
ed
MIT
Press
ISBN
0262031418

Dolev
Shlomi
2000
SelfStabilization
MIT
Press
ISBN
0262041782

Elmasri
Ramez
Navathe
Shamkant
B
2000
Fundamentals
of
Database
Systems
3rd
ed
Addison–Wesley
ISBN
0201542633

Ghosh
Sukumar
2007
Distributed
Systems
–
An
Algorithmic
Approach
Chapman
&
Hall/CRC
ISBN
9781584885641

Lynch
Nancy
A
1996
Distributed
Algorithms
Morgan
Kaufmann
ISBN
1558603484

Herlihy
Maurice
P
Shavit
Nir
N
2008
The
Art
of
Multiprocessor
Programming
Morgan
Kaufmann
ISBN
0123705916

Papadimitriou
Christos
H
1994
Computational
Complexity
Addison–Wesley
ISBN
0201530821

Peleg
David
2000
Distributed
Computing
A
LocalitySensitive
Approach
SIAM
ISBN
0898714648

Articles
Cole
Richard
Vishkin
Uzi
1986
Deterministic
coin
tossing
with
applications
to
optimal
parallel
list
ranking
Information
and
Control
70
1
32–53
doi101016/S0019995886800237

Keidar
Idit
2008
Distributed
computing
column
32
–
The
year
in
review
ACM
SIGACT
News
39
4
53–54
doi101145/14663901466402

Linial
Nathan
1992
Locality
in
distributed
graph
algorithms
SIAM
Journal
on
Computing
21
1
193–201
CiteSeerX
10114716378
doi101137/0221015

Naor
Moni
Stockmeyer
Larry
1995
What
can
be
computed
locally?
PDF
SIAM
Journal
on
Computing
24
6
1259–1277
doi101137/S0097539793254571

Web
sites
Godfrey
Bill
2002
A
primer
on
distributed
computing
Peter
Ian
2004
Ian
Peter's
History
of
the
Internet
Retrieved
20090804
Further
reading
Books
Attiya
Hagit
and
Jennifer
Welch
2004
Distributed
Computing
Fundamentals
Simulations
and
Advanced
Topics
WileyInterscience
ISBN
0471453242
Christian
Cachin
Rachid
Guerraoui
Luís
Rodrigues
2011
Introduction
to
Reliable
and
Secure
Distributed
Programming
2
ed
Springer
ISBN
9783642152597
Coulouris
George
et
al
2011
Distributed
Systems
Concepts
and
Design
5th
Edition
AddisonWesley
ISBN
0132143011
Faber
Jim
1998
Java
Distributed
Computing
O'Reilly

Java
Distributed
Computing
by
Jim
Faber
1998
Garg
Vijay
K
2002
Elements
of
Distributed
Computing
WileyIEEE
Press
ISBN
0471036005
Tel
Gerard
1994
Introduction
to
Distributed
Algorithms
Cambridge
University
Press
Chandy
Mani
et
al
Parallel
Program
Design
Articles
Keidar
Idit
Rajsbaum
Sergio
eds
2000–2009
Distributed
computing
column
ACM
SIGACT
News

Birrell
A
D
Levin
R
Schroeder
M
D
Needham
R
M
April
1982
Grapevine
An
exercise
in
distributed
computing
PDF
Communications
of
the
ACM
25
4
260–274
doi101145/358468358487
Conference
Papers
C
Rodríguez
M
Villagra
and
B
Barán
Asynchronous
team
algorithms
for
Boolean
Satisfiability
Bionetics2007
pp
66–69
2007
External
links
Wikimedia
Commons
has
media
related
to
Distributed
computing
Distributed
computing
at
Curlie
Distributed
computing
journals
at
Curlie
v
t
e
Parallel
computing
General
Distributed
computing
Parallel
computing
Massively
parallel
Cloud
computing
Highperformance
computing
Multiprocessing
Manycore
processor
GPGPU
Computer
network
Systolic
array
Levels
Bit
Instruction
Thread
Task
Data
Memory
Loop
Pipeline
Multithreading
Temporal
Simultaneous
SMT
Speculative
SpMT
Preemptive
Cooperative
Clustered
MultiThread
CMT
Hardware
scout
Theory
PRAM
model
Analysis
of
parallel
algorithms
Amdahl's
law
Gustafson's
law
Cost
efficiency
Karp–Flatt
metric
Slowdown
Speedup
Elements
Process
Thread
Fiber
Instruction
window
Array
data
structure
Coordination
Multiprocessing
Memory
coherency
Cache
coherency
Cache
invalidation
Barrier
Synchronization
Application
checkpointing
Programming
Stream
processing
Dataflow
programming
Models
Implicit
parallelism
Explicit
parallelism
Concurrency
Nonblocking
algorithm
Hardware
Flynn's
taxonomy
SISD
SIMD
SIMT
MISD
MIMD
Dataflow
architecture
Pipelined
processor
Superscalar
processor
Vector
processor
Multiprocessor
symmetric
asymmetric
Memory
shared
distributed
distributed
shared
UMA
NUMA
COMA
Massively
parallel
computer
Computer
cluster
Grid
computer
Hardware
acceleration
APIs
Ateji
PX
BoostThread
Chapel
Charm++
Cilk
Coarray
Fortran
CUDA
Dryad
C++
AMP
Global
Arrays
MPI
OpenMP
OpenCL
OpenHMPP
OpenACC
TPL
PLINQ
PVM
POSIX
Threads
RaftLib
UPC
TBB
ZPL
Problems
Deadlock
Livelock
Deterministic
algorithm
Embarrassingly
parallel
Parallel
slowdown
Race
condition
Software
lockout
Scalability
Starvation
Category
parallel
computing
Media
related
to
Parallel
computing
at
Wikimedia
Commons
v
t
e
Edsger
Dijkstra
Notable
works
A
Primer
of
ALGOL
60
Programming
book
Structured
Programming
book
A
Discipline
of
Programming
book
A
Method
of
Programming
book
Predicate
Calculus
and
Program
Semantics
book
Selected
Writings
on
Computing
A
Personal
Perspective
book
Selected
papers
EWD
manuscripts
A
Note
on
Two
Problems
in
Connexion
with
Graphs
Cooperating
Sequential
Processes
Solution
of
a
Problem
in
Concurrent
Programming
Control
The
Structure
of
the
'THE'Multiprogramming
System
Go
To
Statement
Considered
Harmful
Notes
on
Structured
Programming
The
Humble
Programmer
Programming
Considered
as
a
Human
Activity
How
Do
We
Tell
Truths
That
Might
Hurt?
On
the
Role
of
Scientific
Thought
Selfstabilizing
Systems
in
Spite
of
Distributed
Control
On
the
Cruelty
of
Really
Teaching
Computer
Science
Main
research
areas
Theoretical
computing
science
Software
engineering
Systems
science
Algorithm
design
Concurrent
computing
Distributed
computing
Formal
methods
Programming
methodology
Programming
language
research
Program
design
and
development
Software
architecture
Philosophy
of
computer
programming
and
computing
science
Scientific
contributions
Concepts
and
methods
ALGOL
60
implementation
Call
stack
Concurrency
Concurrent
programming
Cooperating
sequential
processes
Critical
section
Deadly
embrace
deadlock
Dining
philosophers
problem
Dutch
national
flag
problem
Faulttolerant
system
Gotoless
programming
Guarded
Command
Language
Layered
structure
in
software
architecture
Levels
of
abstraction
Mult